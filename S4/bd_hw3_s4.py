# -*- coding: utf-8 -*-
"""BD HW3 S4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KQDvrL3bvTZlcyI9ss7If0VTBgf7pADA

# Step 4 (Spark GraphX)

## Environment Setup

### Install requirements
"""

!apt-get install openjdk-8-jdk-headless -qq > /dev/null
!wget -q http://archive.apache.org/dist/spark/spark-2.4.8/spark-2.4.8-bin-hadoop2.6.tgz
!tar xf spark-2.4.8-bin-hadoop2.6.tgz
!pip -q install findspark graphframes

"""### Set environment variables"""

import os
os.environ["JAVA_HOME"] = "/usr/lib/jvm/java-8-openjdk-amd64"
os.environ["SPARK_HOME"] = "/content/spark-2.4.8-bin-hadoop2.6"

os.environ["HADOOP_HOME"] = os.environ["SPARK_HOME"]
os.environ["PYSPARK_DRIVER_PYTHON"] = "jupyter"
os.environ["PYSPARK_DRIVER_PYTHON_OPTS"] = "notebook"
os.environ["PYSPARK_SUBMIT_ARGS"] = "--packages graphframes:graphframes:0.8.0-spark2.4-s_2.11 pyspark-shell"

"""### Import libraries"""

import findspark
findspark.init()
from pyspark.sql import SparkSession
spark = SparkSession.builder.master("local[*]").getOrCreate()
spark.conf.set("spark.sql.repl.eagerEval.enabled", True) # Property used to format output tables better
spark

from google.colab import drive

from graphframes import *

"""### Mount drive for log file"""

drive.mount('/content/drive')

"""### Get spark context"""

sc = spark.sparkContext

"""## Part 1

### Read vertex and edges file
"""

vertex_file_path = '/content/drive/MyDrive/BD Graph/Vertex.txt'
with open(vertex_file_path) as vertex_file:
    vertices = [(id, title) for id, title in (line.strip().split('\t') for line in vertex_file)]
    vertex_file.close()

edges_file_path = '/content/drive/MyDrive/BD Graph/edges.txt'
with open(edges_file_path) as edges_file:
    edges = [(src, dst) for src, dst in (line.strip().split('\t') for line in edges_file)]
    edges_file.close()

"""### Create graph"""

vertices_data = spark.createDataFrame(vertices, ["id", "title"])
print("Vertices Schema:")
vertices_data.printSchema()

edges_data = spark.createDataFrame(edges, ["src", "dst"])
print("Edges Schema:")
edges_data.printSchema()

wiki_graph = GraphFrame(vertices_data, edges_data)

"""### Show graph vertices and edges"""

wiki_graph.vertices.show()
wiki_graph.edges.show()

"""## Part 2

### Max in degree in graph
"""

print("Sorted in degrees:")
sorted_in_degree = wiki_graph.inDegrees.sort("inDegree", ascending=False)
sorted_in_degree.show()

print("Highest in degree:")
most_in_degree = sorted_in_degree.limit(1)
most_in_degree.show()
most_in_degree_vertex = (wiki_graph.vertices
                         .filter(f"id == {most_in_degree.collect()[0].id}"))
most_in_degree_vertex.show()

"""### Max out degree in graph"""

print("Sorted in degrees:")
sorted_out_degree = wiki_graph.outDegrees.sort("outDegree", ascending=False)
sorted_out_degree.show()

print("Highest out degree:")
most_out_degree = sorted_out_degree.limit(1)
most_out_degree.show()
most_out_degree_vertex = (wiki_graph.vertices
                         .filter(f"id == {most_out_degree.collect()[0].id}"))
most_out_degree_vertex.show()
print("Title: {}".format(most_out_degree_vertex.collect()[0].title))

"""## Part 3

### See overview of connected components
"""

sc.setCheckpointDir('graphframes_cps')
wiki_graph.connectedComponents().show()

"""### Calculate size of connected components"""

connected_components_size = (wiki_graph
                             .connectedComponents()
                             .groupBy('component')
                             .count()
                             .cache())
print("Connected components size:")
connected_components_size.show()

"""#### Showing biggest connect components"""

connected_components_size.sort('count', ascending=False).show()

"""### Part 4

### Join in degrees with vertices data
"""

vertices_full = wiki_graph.vertices.join(wiki_graph.inDegrees, 'id').cache()
print("Vertices data with in degrees:")
vertices_full.show()

"""### Find top 10 articles"""

top_10_articles = (vertices_full
                   .sort('inDegree', ascending=False)
                   .limit(10))
print("Top 10 articles:")
top_10_articles.show()
print("Full titles:")
print([article.title for article in top_10_articles.collect()])

"""### Part 5

### Install requirements
"""

!pip3 install -q networkx dimcli pyvis

import networkx as nx
wiki = nx.from_pandas_edgelist(wiki_graph.edges.toPandas(), source='src', target='dst')

from dimcli.utils.networkviz import NetworkViz
viznet = NetworkViz(notebook=True, width="100%", height="800px")
viznet.from_nx(wiki)
viznet.show('wiki.html')

nx.draw(g)